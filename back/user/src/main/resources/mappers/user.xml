<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.user.mapper.UserMapper">

    <resultMap id="RefreshTokenResultMap" type="com.ssafy.user.entity.RefreshToken">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="tokenId" column="token_id"/>
        <result property="refreshToken" column="refresh_token"/>
        <result property="issuedAt" column="issued_at"/>
        <result property="expiresAt" column="expires_at"/>
    </resultMap>

    <!-- 이메일을 통한 사용자 조회 -->
    <select id="findByEmail" parameterType="String" resultType="com.ssafy.user.entity.User">
        SELECT
        *
        FROM user
        WHERE email = #{email}
    </select>

    <!-- 해당 사용자가 판매자인지 여부 확인 (테이블 및 조건은 실제 DB 스키마에 맞게 수정) -->
    <select id="isSeller" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM seller
        WHERE user_id = #{userId}
    </select>

    <!-- 사용자 정보 등록 -->
    <insert id="insertUser" parameterType="com.ssafy.user.entity.User">
        INSERT INTO user (user_id, email, name, nickname, gender, age, created_at)
        VALUES (#{userId}, #{email}, #{name}, #{nickname}, #{gender}, #{age}, #{createdAt})
    </insert>

    <!-- 사용자 정보 수정 -->
    <update id="updateMyInfo" parameterType="map">
        update user
        set
        nickname = #{nickname}
        where email = #{email}
    </update>

    <!-- Refresh Token 등록 (리프레쉬 토큰 생성 시 사용) -->
    <insert id="insertRefreshToken" parameterType="map">
        INSERT INTO refresh_token (user_id, token_id, refresh_token, issued_at, expires_at)
        VALUES (#{userId}, #{tokenId}, #{refreshToken}, #{issuedAt}, #{expiresAt})
    </insert>

    <!-- 사용자 ID를 통해 해당 사용자의 모든 Refresh Token 조회 (다중 토큰 관리 시 활용) -->
    <select id="findRefreshTokensByUserId" parameterType="int" resultMap="RefreshTokenResultMap">
        SELECT id, user_id, token_id, refresh_token, issued_at, expires_at
        FROM refresh_token
        WHERE user_id = #{userId}
    </select>

    <!-- tokenId를 통한 단일 Refresh Token 삭제 (토큰 회전 시 사용) -->
    <delete id="deleteRefreshTokenByTokenId" parameterType="String">
        DELETE FROM refresh_token
        WHERE token_id = #{tokenId}
    </delete>

    <!-- 사용자 ID를 통한 모든 Refresh Token 삭제  -->
    <delete id="deleteRefreshTokensByUserId" parameterType="int">
        DELETE FROM refresh_token
        WHERE user_id = #{userId}
    </delete>

</mapper>