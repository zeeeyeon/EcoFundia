---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---

---

# 디버그 관리
- logger 라이브러리 이용해서 디버그

# 상태 관리
- Riverpod 사용: 전역 상태 관리는 Riverpod을 사용하여 일관성을 유지합니다.

# 중복된 코드 방지
- 코드를 생성하기 전에 중복되는 코드가 없는 지 확인하고 재사용가능한 코드가 있다면 재사용을 하는 방향으로 코드를 작성함.

# 폴더 구조 (MVVM + 클린 아키텍처)
- MVVM + 클린 아키텍처 적용
- UI, 데이터, 도메인 레이어를 분리하여 유지보수성을 높입니다.
- 공통으로 사용하는 요소(예: 문자열, 색상, 유틸리티 함수)는 core 폴더에서 관리합니다.

-예시 폴더 구조

lib/
├── core/
|   ├── config/   
│   ├── constants/          // 앱 전반에 걸친 상수들 (API URL, 에러 메시지 등)
│   ├── themes/             // 공통 테마, 스타일, 폰트, 컬러 정의
│   └── utils/              // 공통 유틸리티, 로깅, 날짜 처리 등
|       
│
└── features/
    └── auth/               // 인증(연동 로그인) 관련 기능
        ├── data/         // 외부 데이터 소스와 통신 및 모델 매핑
        │   ├── datasources/
        │   │   └── remote_auth_data_source.dart
        │   ├── models/
        │   │   └── auth_response_model.dart
        │   └── repositories/
        │       └── auth_repository_impl.dart
        │
        ├── domain/       // 비즈니스 로직 및 엔티티, UseCase 정의 (인터페이스와 핵심 로직)
        │   ├── entities/
        │   │   └── auth_entity.dart         // (예: 사용자, 토큰 정보 등)
        │   ├── repositories/
        │   │   └── auth_repository.dart     // 데이터 계층에 대한 추상화
        │   └── usecases/
        │       ├── google_sign_in_use_case.dart
        │       ├── complete_sign_up_use_case.dart
        │       ├── sign_out_use_case.dart
        │       └── check_login_status_use_case.dart
        │
        └── presentation/   // UI 및 MVVM 관련 코드 (View, ViewModel, Widgets)
            ├── view_models/
            │   ├── auth_view_model.dart
            │   └── sign_up_view_model.dart
            ├── views/
            │   ├── sign_in_screen.dart
            │   └── sign_up_screen.dart
            └── widgets/
                ├── custom_text_field.dart
                └── gender_selector.dart

# 각 레이어 및 폴더의 역할
- Core Layer
constants: 앱 전반에서 사용하는 상수나 설정 값을 보관합니다.
themes: 앱의 일관된 스타일(컬러, 텍스트 스타일 등)을 정의합니다.
utils: 공통으로 사용되는 헬퍼 함수, 로깅 유틸리티, 형식 변환 등을 구현합니다.
Features Layer (여기서는 auth)

- Data Layer
Datasources: 외부 API나 로컬 데이터베이스 등에서 데이터를 가져오는 역할을 합니다. 예를 들어, 구글 로그인 API를 호출하는 코드가 여기에 위치합니다.
Models: 외부 데이터 소스에서 받은 JSON 데이터를 앱 내부 모델(예: AuthResponseModel)로 매핑합니다.
Repositories (Impl): domain 레이어의 Repository 인터페이스를 구현합니다. 데이터 소스에서 데이터를 받아와 모델을 변환하고, 필요한 비즈니스 로직 전처리를 합니다.


- Domain Layer
Entities: 도메인 객체(비즈니스 모델)를 정의합니다. 예를 들어, 인증 성공 시 반환되는 사용자 정보나 토큰 정보를 엔티티로 정의할 수 있습니다.
Repositories (Interface): 데이터 레이어에 대한 추상화를 제공합니다. 이 인터페이스는 UseCase가 의존하는 핵심 계약(contract) 역할을 합니다.
UseCases: 비즈니스 로직을 수행하는 단위 작업들을 정의합니다. 예를 들어, 구글 로그인, 회원가입 완료, 로그아웃, 로그인 상태 확인 등 각 기능의 핵심 로직을 처리합니다.

-Presentation Layer
ViewModels: MVVM 패턴의 ViewModel로, UseCase를 호출하여 데이터를 가져오고, UI 상태를 관리합니다.
Views: 사용자와 상호작용하는 화면(UI)입니다. 예를 들어, 로그인 화면, 회원가입 화면 등이 포함됩니다.
Widgets: 재사용 가능한 UI 컴포넌트들을 별도로 관리합니다. 예) 커스텀 텍스트필드, 성별 선택 위젯 등



# 코드 스타일 및 네이밍 규칙
- 카멜케이스(CamelCase) 네이밍 사용
- 클래스명: UpperCamelCase
- 변수 및 함수명: lowerCamelCase
- 상수: UPPER_SNAKE_CASE
- 파일명: snake_case.dart

# 컴포넌트화 및 재사용성
- 재사용 가능한 UI 및 로직을 컴포넌트화하여 모듈성을 유지합니다.
- 중복 코드 최소화 및 확장성을 고려한 설계

# 빌드 도구
- 빌드러너 사용하지 않음 
- 객체 비교 및 불변성 관리를 위해 Equatable 사용

# 브랜치 전략
- Git Flow 방식 적용
- main: 배포 가능한 안정적인 코드만 포함
- develop: 새로운 기능이 추가되거나 개선되는 브랜치
- feature/*: 새로운 기능 개발을 위한 브랜치
- release/*: 배포를 준비하는 브랜치
- hotfix/*: 긴급 버그 수정을 위한 브랜치

# 코드 품질 및 협업
- 테스트 코드 필수 작성 (단위 테스트 및 통합 테스트)
- 코드 리뷰 필수 진행 (Pull Request 기반 코드 리뷰)
- 린트(Linter) 적용 및 코드 스타일 준수
- 정기적인 리팩토링을 통해 코드 유지보수성 향상

# 문서화 및 가이드라인
- 주요 기능 및 사용법 문서화
- 클래스, 함수, API 문서화를 위한 주석 작성 필수



